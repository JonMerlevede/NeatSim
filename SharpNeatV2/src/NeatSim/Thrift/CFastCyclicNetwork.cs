/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NeatSim.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CFastCyclicNetwork : TBase
  {
    private List<CConnection> _connections;
    private List<string> _activationFunctions;
    private List<List<double>> _neuronAuxArgs;
    private int _neuronCount;
    private int _inputNeuronCount;
    private int _outputNeuronCount;
    private int _timestepsPerActivation;

    public List<CConnection> Connections
    {
      get
      {
        return _connections;
      }
      set
      {
        __isset.connections = true;
        this._connections = value;
      }
    }

    public List<string> ActivationFunctions
    {
      get
      {
        return _activationFunctions;
      }
      set
      {
        __isset.activationFunctions = true;
        this._activationFunctions = value;
      }
    }

    public List<List<double>> NeuronAuxArgs
    {
      get
      {
        return _neuronAuxArgs;
      }
      set
      {
        __isset.neuronAuxArgs = true;
        this._neuronAuxArgs = value;
      }
    }

    public int NeuronCount
    {
      get
      {
        return _neuronCount;
      }
      set
      {
        __isset.neuronCount = true;
        this._neuronCount = value;
      }
    }

    public int InputNeuronCount
    {
      get
      {
        return _inputNeuronCount;
      }
      set
      {
        __isset.inputNeuronCount = true;
        this._inputNeuronCount = value;
      }
    }

    public int OutputNeuronCount
    {
      get
      {
        return _outputNeuronCount;
      }
      set
      {
        __isset.outputNeuronCount = true;
        this._outputNeuronCount = value;
      }
    }

    public int TimestepsPerActivation
    {
      get
      {
        return _timestepsPerActivation;
      }
      set
      {
        __isset.timestepsPerActivation = true;
        this._timestepsPerActivation = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool connections;
      public bool activationFunctions;
      public bool neuronAuxArgs;
      public bool neuronCount;
      public bool inputNeuronCount;
      public bool outputNeuronCount;
      public bool timestepsPerActivation;
    }

    public CFastCyclicNetwork() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.List) {
              {
                Connections = new List<CConnection>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  CConnection _elem2 = new CConnection();
                  _elem2 = new CConnection();
                  _elem2.Read(iprot);
                  Connections.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                ActivationFunctions = new List<string>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  string _elem5 = null;
                  _elem5 = iprot.ReadString();
                  ActivationFunctions.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.List) {
              {
                NeuronAuxArgs = new List<List<double>>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  List<double> _elem8 = new List<double>();
                  {
                    _elem8 = new List<double>();
                    TList _list9 = iprot.ReadListBegin();
                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                    {
                      double _elem11 = (double)0;
                      _elem11 = iprot.ReadDouble();
                      _elem8.Add(_elem11);
                    }
                    iprot.ReadListEnd();
                  }
                  NeuronAuxArgs.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.I32) {
              NeuronCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              InputNeuronCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              OutputNeuronCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              TimestepsPerActivation = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CFastCyclicNetwork");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Connections != null && __isset.connections) {
        field.Name = "connections";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Connections.Count));
          foreach (CConnection _iter12 in Connections)
          {
            _iter12.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ActivationFunctions != null && __isset.activationFunctions) {
        field.Name = "activationFunctions";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ActivationFunctions.Count));
          foreach (string _iter13 in ActivationFunctions)
          {
            oprot.WriteString(_iter13);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (NeuronAuxArgs != null && __isset.neuronAuxArgs) {
        field.Name = "neuronAuxArgs";
        field.Type = TType.List;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.List, NeuronAuxArgs.Count));
          foreach (List<double> _iter14 in NeuronAuxArgs)
          {
            {
              oprot.WriteListBegin(new TList(TType.Double, _iter14.Count));
              foreach (double _iter15 in _iter14)
              {
                oprot.WriteDouble(_iter15);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.neuronCount) {
        field.Name = "neuronCount";
        field.Type = TType.I32;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NeuronCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.inputNeuronCount) {
        field.Name = "inputNeuronCount";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InputNeuronCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.outputNeuronCount) {
        field.Name = "outputNeuronCount";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(OutputNeuronCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestepsPerActivation) {
        field.Name = "timestepsPerActivation";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TimestepsPerActivation);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CFastCyclicNetwork(");
      sb.Append("Connections: ");
      sb.Append(Connections);
      sb.Append(",ActivationFunctions: ");
      sb.Append(ActivationFunctions);
      sb.Append(",NeuronAuxArgs: ");
      sb.Append(NeuronAuxArgs);
      sb.Append(",NeuronCount: ");
      sb.Append(NeuronCount);
      sb.Append(",InputNeuronCount: ");
      sb.Append(InputNeuronCount);
      sb.Append(",OutputNeuronCount: ");
      sb.Append(OutputNeuronCount);
      sb.Append(",TimestepsPerActivation: ");
      sb.Append(TimestepsPerActivation);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
