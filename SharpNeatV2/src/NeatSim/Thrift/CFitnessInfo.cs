/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NeatSim.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CFitnessInfo : TBase
  {
    private List<CAuxFitnessInfo> _auxFitness;
    private double _fitness;
    private bool _stopConditionSatisfied;

    public List<CAuxFitnessInfo> AuxFitness
    {
      get
      {
        return _auxFitness;
      }
      set
      {
        __isset.auxFitness = true;
        this._auxFitness = value;
      }
    }

    public double Fitness
    {
      get
      {
        return _fitness;
      }
      set
      {
        __isset.fitness = true;
        this._fitness = value;
      }
    }

    public bool StopConditionSatisfied
    {
      get
      {
        return _stopConditionSatisfied;
      }
      set
      {
        __isset.stopConditionSatisfied = true;
        this._stopConditionSatisfied = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool auxFitness;
      public bool fitness;
      public bool stopConditionSatisfied;
    }

    public CFitnessInfo() {
      this._stopConditionSatisfied = false;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.List) {
              {
                AuxFitness = new List<CAuxFitnessInfo>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  CAuxFitnessInfo _elem18 = new CAuxFitnessInfo();
                  _elem18 = new CAuxFitnessInfo();
                  _elem18.Read(iprot);
                  AuxFitness.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Double) {
              Fitness = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Bool) {
              StopConditionSatisfied = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CFitnessInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AuxFitness != null && __isset.auxFitness) {
        field.Name = "auxFitness";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AuxFitness.Count));
          foreach (CAuxFitnessInfo _iter19 in AuxFitness)
          {
            _iter19.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.fitness) {
        field.Name = "fitness";
        field.Type = TType.Double;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Fitness);
        oprot.WriteFieldEnd();
      }
      if (__isset.stopConditionSatisfied) {
        field.Name = "stopConditionSatisfied";
        field.Type = TType.Bool;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(StopConditionSatisfied);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CFitnessInfo(");
      sb.Append("AuxFitness: ");
      sb.Append(AuxFitness);
      sb.Append(",Fitness: ");
      sb.Append(Fitness);
      sb.Append(",StopConditionSatisfied: ");
      sb.Append(StopConditionSatisfied);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
