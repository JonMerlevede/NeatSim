/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NeatSim.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CPopulationInfo : TBase
  {
    private int _generation;
    private List<CFastCyclicNetwork> _phenomes;

    public int Generation
    {
      get
      {
        return _generation;
      }
      set
      {
        __isset.generation = true;
        this._generation = value;
      }
    }

    public List<CFastCyclicNetwork> Phenomes
    {
      get
      {
        return _phenomes;
      }
      set
      {
        __isset.phenomes = true;
        this._phenomes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool generation;
      public bool phenomes;
    }

    public CPopulationInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 5:
            if (field.Type == TType.I32) {
              Generation = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                Phenomes = new List<CFastCyclicNetwork>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  CFastCyclicNetwork _elem22 = new CFastCyclicNetwork();
                  _elem22 = new CFastCyclicNetwork();
                  _elem22.Read(iprot);
                  Phenomes.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CPopulationInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.generation) {
        field.Name = "generation";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Generation);
        oprot.WriteFieldEnd();
      }
      if (Phenomes != null && __isset.phenomes) {
        field.Name = "phenomes";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Phenomes.Count));
          foreach (CFastCyclicNetwork _iter23 in Phenomes)
          {
            _iter23.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CPopulationInfo(");
      sb.Append("Generation: ");
      sb.Append(Generation);
      sb.Append(",Phenomes: ");
      sb.Append(Phenomes);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
