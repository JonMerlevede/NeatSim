/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package neatsim.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CFastCyclicNetwork implements org.apache.thrift.TBase<CFastCyclicNetwork, CFastCyclicNetwork._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CFastCyclicNetwork");

  private static final org.apache.thrift.protocol.TField CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("connections", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ACTIVATION_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("activationFunctions", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField NEURON_AUX_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("neuronAuxArgs", org.apache.thrift.protocol.TType.LIST, (short)30);
  private static final org.apache.thrift.protocol.TField NEURON_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("neuronCount", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField INPUT_NEURON_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("inputNeuronCount", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField OUTPUT_NEURON_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputNeuronCount", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField TIMESTEPS_PER_ACTIVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("timestepsPerActivation", org.apache.thrift.protocol.TType.I32, (short)70);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CFastCyclicNetworkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CFastCyclicNetworkTupleSchemeFactory());
  }

  public List<CConnection> connections; // required
  public List<String> activationFunctions; // required
  public List<List<Double>> neuronAuxArgs; // required
  public int neuronCount; // required
  public int inputNeuronCount; // required
  public int outputNeuronCount; // required
  public int timestepsPerActivation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONNECTIONS((short)10, "connections"),
    ACTIVATION_FUNCTIONS((short)20, "activationFunctions"),
    NEURON_AUX_ARGS((short)30, "neuronAuxArgs"),
    NEURON_COUNT((short)40, "neuronCount"),
    INPUT_NEURON_COUNT((short)50, "inputNeuronCount"),
    OUTPUT_NEURON_COUNT((short)60, "outputNeuronCount"),
    TIMESTEPS_PER_ACTIVATION((short)70, "timestepsPerActivation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // CONNECTIONS
          return CONNECTIONS;
        case 20: // ACTIVATION_FUNCTIONS
          return ACTIVATION_FUNCTIONS;
        case 30: // NEURON_AUX_ARGS
          return NEURON_AUX_ARGS;
        case 40: // NEURON_COUNT
          return NEURON_COUNT;
        case 50: // INPUT_NEURON_COUNT
          return INPUT_NEURON_COUNT;
        case 60: // OUTPUT_NEURON_COUNT
          return OUTPUT_NEURON_COUNT;
        case 70: // TIMESTEPS_PER_ACTIVATION
          return TIMESTEPS_PER_ACTIVATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEURONCOUNT_ISSET_ID = 0;
  private static final int __INPUTNEURONCOUNT_ISSET_ID = 1;
  private static final int __OUTPUTNEURONCOUNT_ISSET_ID = 2;
  private static final int __TIMESTEPSPERACTIVATION_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("connections", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CConnection.class))));
    tmpMap.put(_Fields.ACTIVATION_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("activationFunctions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NEURON_AUX_ARGS, new org.apache.thrift.meta_data.FieldMetaData("neuronAuxArgs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.NEURON_COUNT, new org.apache.thrift.meta_data.FieldMetaData("neuronCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INPUT_NEURON_COUNT, new org.apache.thrift.meta_data.FieldMetaData("inputNeuronCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTPUT_NEURON_COUNT, new org.apache.thrift.meta_data.FieldMetaData("outputNeuronCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTEPS_PER_ACTIVATION, new org.apache.thrift.meta_data.FieldMetaData("timestepsPerActivation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CFastCyclicNetwork.class, metaDataMap);
  }

  public CFastCyclicNetwork() {
  }

  public CFastCyclicNetwork(
    List<CConnection> connections,
    List<String> activationFunctions,
    List<List<Double>> neuronAuxArgs,
    int neuronCount,
    int inputNeuronCount,
    int outputNeuronCount,
    int timestepsPerActivation)
  {
    this();
    this.connections = connections;
    this.activationFunctions = activationFunctions;
    this.neuronAuxArgs = neuronAuxArgs;
    this.neuronCount = neuronCount;
    setNeuronCountIsSet(true);
    this.inputNeuronCount = inputNeuronCount;
    setInputNeuronCountIsSet(true);
    this.outputNeuronCount = outputNeuronCount;
    setOutputNeuronCountIsSet(true);
    this.timestepsPerActivation = timestepsPerActivation;
    setTimestepsPerActivationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CFastCyclicNetwork(CFastCyclicNetwork other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConnections()) {
      List<CConnection> __this__connections = new ArrayList<CConnection>();
      for (CConnection other_element : other.connections) {
        __this__connections.add(new CConnection(other_element));
      }
      this.connections = __this__connections;
    }
    if (other.isSetActivationFunctions()) {
      List<String> __this__activationFunctions = new ArrayList<String>();
      for (String other_element : other.activationFunctions) {
        __this__activationFunctions.add(other_element);
      }
      this.activationFunctions = __this__activationFunctions;
    }
    if (other.isSetNeuronAuxArgs()) {
      List<List<Double>> __this__neuronAuxArgs = new ArrayList<List<Double>>();
      for (List<Double> other_element : other.neuronAuxArgs) {
        List<Double> __this__neuronAuxArgs_copy = new ArrayList<Double>();
        for (Double other_element_element : other_element) {
          __this__neuronAuxArgs_copy.add(other_element_element);
        }
        __this__neuronAuxArgs.add(__this__neuronAuxArgs_copy);
      }
      this.neuronAuxArgs = __this__neuronAuxArgs;
    }
    this.neuronCount = other.neuronCount;
    this.inputNeuronCount = other.inputNeuronCount;
    this.outputNeuronCount = other.outputNeuronCount;
    this.timestepsPerActivation = other.timestepsPerActivation;
  }

  public CFastCyclicNetwork deepCopy() {
    return new CFastCyclicNetwork(this);
  }

  @Override
  public void clear() {
    this.connections = null;
    this.activationFunctions = null;
    this.neuronAuxArgs = null;
    setNeuronCountIsSet(false);
    this.neuronCount = 0;
    setInputNeuronCountIsSet(false);
    this.inputNeuronCount = 0;
    setOutputNeuronCountIsSet(false);
    this.outputNeuronCount = 0;
    setTimestepsPerActivationIsSet(false);
    this.timestepsPerActivation = 0;
  }

  public int getConnectionsSize() {
    return (this.connections == null) ? 0 : this.connections.size();
  }

  public java.util.Iterator<CConnection> getConnectionsIterator() {
    return (this.connections == null) ? null : this.connections.iterator();
  }

  public void addToConnections(CConnection elem) {
    if (this.connections == null) {
      this.connections = new ArrayList<CConnection>();
    }
    this.connections.add(elem);
  }

  public List<CConnection> getConnections() {
    return this.connections;
  }

  public CFastCyclicNetwork setConnections(List<CConnection> connections) {
    this.connections = connections;
    return this;
  }

  public void unsetConnections() {
    this.connections = null;
  }

  /** Returns true if field connections is set (has been assigned a value) and false otherwise */
  public boolean isSetConnections() {
    return this.connections != null;
  }

  public void setConnectionsIsSet(boolean value) {
    if (!value) {
      this.connections = null;
    }
  }

  public int getActivationFunctionsSize() {
    return (this.activationFunctions == null) ? 0 : this.activationFunctions.size();
  }

  public java.util.Iterator<String> getActivationFunctionsIterator() {
    return (this.activationFunctions == null) ? null : this.activationFunctions.iterator();
  }

  public void addToActivationFunctions(String elem) {
    if (this.activationFunctions == null) {
      this.activationFunctions = new ArrayList<String>();
    }
    this.activationFunctions.add(elem);
  }

  public List<String> getActivationFunctions() {
    return this.activationFunctions;
  }

  public CFastCyclicNetwork setActivationFunctions(List<String> activationFunctions) {
    this.activationFunctions = activationFunctions;
    return this;
  }

  public void unsetActivationFunctions() {
    this.activationFunctions = null;
  }

  /** Returns true if field activationFunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetActivationFunctions() {
    return this.activationFunctions != null;
  }

  public void setActivationFunctionsIsSet(boolean value) {
    if (!value) {
      this.activationFunctions = null;
    }
  }

  public int getNeuronAuxArgsSize() {
    return (this.neuronAuxArgs == null) ? 0 : this.neuronAuxArgs.size();
  }

  public java.util.Iterator<List<Double>> getNeuronAuxArgsIterator() {
    return (this.neuronAuxArgs == null) ? null : this.neuronAuxArgs.iterator();
  }

  public void addToNeuronAuxArgs(List<Double> elem) {
    if (this.neuronAuxArgs == null) {
      this.neuronAuxArgs = new ArrayList<List<Double>>();
    }
    this.neuronAuxArgs.add(elem);
  }

  public List<List<Double>> getNeuronAuxArgs() {
    return this.neuronAuxArgs;
  }

  public CFastCyclicNetwork setNeuronAuxArgs(List<List<Double>> neuronAuxArgs) {
    this.neuronAuxArgs = neuronAuxArgs;
    return this;
  }

  public void unsetNeuronAuxArgs() {
    this.neuronAuxArgs = null;
  }

  /** Returns true if field neuronAuxArgs is set (has been assigned a value) and false otherwise */
  public boolean isSetNeuronAuxArgs() {
    return this.neuronAuxArgs != null;
  }

  public void setNeuronAuxArgsIsSet(boolean value) {
    if (!value) {
      this.neuronAuxArgs = null;
    }
  }

  public int getNeuronCount() {
    return this.neuronCount;
  }

  public CFastCyclicNetwork setNeuronCount(int neuronCount) {
    this.neuronCount = neuronCount;
    setNeuronCountIsSet(true);
    return this;
  }

  public void unsetNeuronCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEURONCOUNT_ISSET_ID);
  }

  /** Returns true if field neuronCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNeuronCount() {
    return EncodingUtils.testBit(__isset_bitfield, __NEURONCOUNT_ISSET_ID);
  }

  public void setNeuronCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEURONCOUNT_ISSET_ID, value);
  }

  public int getInputNeuronCount() {
    return this.inputNeuronCount;
  }

  public CFastCyclicNetwork setInputNeuronCount(int inputNeuronCount) {
    this.inputNeuronCount = inputNeuronCount;
    setInputNeuronCountIsSet(true);
    return this;
  }

  public void unsetInputNeuronCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTNEURONCOUNT_ISSET_ID);
  }

  /** Returns true if field inputNeuronCount is set (has been assigned a value) and false otherwise */
  public boolean isSetInputNeuronCount() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTNEURONCOUNT_ISSET_ID);
  }

  public void setInputNeuronCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTNEURONCOUNT_ISSET_ID, value);
  }

  public int getOutputNeuronCount() {
    return this.outputNeuronCount;
  }

  public CFastCyclicNetwork setOutputNeuronCount(int outputNeuronCount) {
    this.outputNeuronCount = outputNeuronCount;
    setOutputNeuronCountIsSet(true);
    return this;
  }

  public void unsetOutputNeuronCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUTNEURONCOUNT_ISSET_ID);
  }

  /** Returns true if field outputNeuronCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputNeuronCount() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUTNEURONCOUNT_ISSET_ID);
  }

  public void setOutputNeuronCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUTNEURONCOUNT_ISSET_ID, value);
  }

  public int getTimestepsPerActivation() {
    return this.timestepsPerActivation;
  }

  public CFastCyclicNetwork setTimestepsPerActivation(int timestepsPerActivation) {
    this.timestepsPerActivation = timestepsPerActivation;
    setTimestepsPerActivationIsSet(true);
    return this;
  }

  public void unsetTimestepsPerActivation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTEPSPERACTIVATION_ISSET_ID);
  }

  /** Returns true if field timestepsPerActivation is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestepsPerActivation() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTEPSPERACTIVATION_ISSET_ID);
  }

  public void setTimestepsPerActivationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTEPSPERACTIVATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONNECTIONS:
      if (value == null) {
        unsetConnections();
      } else {
        setConnections((List<CConnection>)value);
      }
      break;

    case ACTIVATION_FUNCTIONS:
      if (value == null) {
        unsetActivationFunctions();
      } else {
        setActivationFunctions((List<String>)value);
      }
      break;

    case NEURON_AUX_ARGS:
      if (value == null) {
        unsetNeuronAuxArgs();
      } else {
        setNeuronAuxArgs((List<List<Double>>)value);
      }
      break;

    case NEURON_COUNT:
      if (value == null) {
        unsetNeuronCount();
      } else {
        setNeuronCount((Integer)value);
      }
      break;

    case INPUT_NEURON_COUNT:
      if (value == null) {
        unsetInputNeuronCount();
      } else {
        setInputNeuronCount((Integer)value);
      }
      break;

    case OUTPUT_NEURON_COUNT:
      if (value == null) {
        unsetOutputNeuronCount();
      } else {
        setOutputNeuronCount((Integer)value);
      }
      break;

    case TIMESTEPS_PER_ACTIVATION:
      if (value == null) {
        unsetTimestepsPerActivation();
      } else {
        setTimestepsPerActivation((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONNECTIONS:
      return getConnections();

    case ACTIVATION_FUNCTIONS:
      return getActivationFunctions();

    case NEURON_AUX_ARGS:
      return getNeuronAuxArgs();

    case NEURON_COUNT:
      return Integer.valueOf(getNeuronCount());

    case INPUT_NEURON_COUNT:
      return Integer.valueOf(getInputNeuronCount());

    case OUTPUT_NEURON_COUNT:
      return Integer.valueOf(getOutputNeuronCount());

    case TIMESTEPS_PER_ACTIVATION:
      return Integer.valueOf(getTimestepsPerActivation());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONNECTIONS:
      return isSetConnections();
    case ACTIVATION_FUNCTIONS:
      return isSetActivationFunctions();
    case NEURON_AUX_ARGS:
      return isSetNeuronAuxArgs();
    case NEURON_COUNT:
      return isSetNeuronCount();
    case INPUT_NEURON_COUNT:
      return isSetInputNeuronCount();
    case OUTPUT_NEURON_COUNT:
      return isSetOutputNeuronCount();
    case TIMESTEPS_PER_ACTIVATION:
      return isSetTimestepsPerActivation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CFastCyclicNetwork)
      return this.equals((CFastCyclicNetwork)that);
    return false;
  }

  public boolean equals(CFastCyclicNetwork that) {
    if (that == null)
      return false;

    boolean this_present_connections = true && this.isSetConnections();
    boolean that_present_connections = true && that.isSetConnections();
    if (this_present_connections || that_present_connections) {
      if (!(this_present_connections && that_present_connections))
        return false;
      if (!this.connections.equals(that.connections))
        return false;
    }

    boolean this_present_activationFunctions = true && this.isSetActivationFunctions();
    boolean that_present_activationFunctions = true && that.isSetActivationFunctions();
    if (this_present_activationFunctions || that_present_activationFunctions) {
      if (!(this_present_activationFunctions && that_present_activationFunctions))
        return false;
      if (!this.activationFunctions.equals(that.activationFunctions))
        return false;
    }

    boolean this_present_neuronAuxArgs = true && this.isSetNeuronAuxArgs();
    boolean that_present_neuronAuxArgs = true && that.isSetNeuronAuxArgs();
    if (this_present_neuronAuxArgs || that_present_neuronAuxArgs) {
      if (!(this_present_neuronAuxArgs && that_present_neuronAuxArgs))
        return false;
      if (!this.neuronAuxArgs.equals(that.neuronAuxArgs))
        return false;
    }

    boolean this_present_neuronCount = true;
    boolean that_present_neuronCount = true;
    if (this_present_neuronCount || that_present_neuronCount) {
      if (!(this_present_neuronCount && that_present_neuronCount))
        return false;
      if (this.neuronCount != that.neuronCount)
        return false;
    }

    boolean this_present_inputNeuronCount = true;
    boolean that_present_inputNeuronCount = true;
    if (this_present_inputNeuronCount || that_present_inputNeuronCount) {
      if (!(this_present_inputNeuronCount && that_present_inputNeuronCount))
        return false;
      if (this.inputNeuronCount != that.inputNeuronCount)
        return false;
    }

    boolean this_present_outputNeuronCount = true;
    boolean that_present_outputNeuronCount = true;
    if (this_present_outputNeuronCount || that_present_outputNeuronCount) {
      if (!(this_present_outputNeuronCount && that_present_outputNeuronCount))
        return false;
      if (this.outputNeuronCount != that.outputNeuronCount)
        return false;
    }

    boolean this_present_timestepsPerActivation = true;
    boolean that_present_timestepsPerActivation = true;
    if (this_present_timestepsPerActivation || that_present_timestepsPerActivation) {
      if (!(this_present_timestepsPerActivation && that_present_timestepsPerActivation))
        return false;
      if (this.timestepsPerActivation != that.timestepsPerActivation)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CFastCyclicNetwork other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CFastCyclicNetwork typedOther = (CFastCyclicNetwork)other;

    lastComparison = Boolean.valueOf(isSetConnections()).compareTo(typedOther.isSetConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connections, typedOther.connections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivationFunctions()).compareTo(typedOther.isSetActivationFunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivationFunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activationFunctions, typedOther.activationFunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeuronAuxArgs()).compareTo(typedOther.isSetNeuronAuxArgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeuronAuxArgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neuronAuxArgs, typedOther.neuronAuxArgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeuronCount()).compareTo(typedOther.isSetNeuronCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeuronCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neuronCount, typedOther.neuronCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputNeuronCount()).compareTo(typedOther.isSetInputNeuronCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputNeuronCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputNeuronCount, typedOther.inputNeuronCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputNeuronCount()).compareTo(typedOther.isSetOutputNeuronCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputNeuronCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputNeuronCount, typedOther.outputNeuronCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestepsPerActivation()).compareTo(typedOther.isSetTimestepsPerActivation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestepsPerActivation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestepsPerActivation, typedOther.timestepsPerActivation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CFastCyclicNetwork(");
    boolean first = true;

    sb.append("connections:");
    if (this.connections == null) {
      sb.append("null");
    } else {
      sb.append(this.connections);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activationFunctions:");
    if (this.activationFunctions == null) {
      sb.append("null");
    } else {
      sb.append(this.activationFunctions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("neuronAuxArgs:");
    if (this.neuronAuxArgs == null) {
      sb.append("null");
    } else {
      sb.append(this.neuronAuxArgs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("neuronCount:");
    sb.append(this.neuronCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputNeuronCount:");
    sb.append(this.inputNeuronCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputNeuronCount:");
    sb.append(this.outputNeuronCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestepsPerActivation:");
    sb.append(this.timestepsPerActivation);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (connections == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'connections' was not present! Struct: " + toString());
    }
    if (activationFunctions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'activationFunctions' was not present! Struct: " + toString());
    }
    if (neuronAuxArgs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'neuronAuxArgs' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'neuronCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'inputNeuronCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'outputNeuronCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timestepsPerActivation' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CFastCyclicNetworkStandardSchemeFactory implements SchemeFactory {
    public CFastCyclicNetworkStandardScheme getScheme() {
      return new CFastCyclicNetworkStandardScheme();
    }
  }

  private static class CFastCyclicNetworkStandardScheme extends StandardScheme<CFastCyclicNetwork> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CFastCyclicNetwork struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.connections = new ArrayList<CConnection>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  CConnection _elem2; // required
                  _elem2 = new CConnection();
                  _elem2.read(iprot);
                  struct.connections.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACTIVATION_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.activationFunctions = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.activationFunctions.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setActivationFunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // NEURON_AUX_ARGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.neuronAuxArgs = new ArrayList<List<Double>>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  List<Double> _elem8; // required
                  {
                    org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                    _elem8 = new ArrayList<Double>(_list9.size);
                    for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                    {
                      double _elem11; // required
                      _elem11 = iprot.readDouble();
                      _elem8.add(_elem11);
                    }
                    iprot.readListEnd();
                  }
                  struct.neuronAuxArgs.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setNeuronAuxArgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // NEURON_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.neuronCount = iprot.readI32();
              struct.setNeuronCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // INPUT_NEURON_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inputNeuronCount = iprot.readI32();
              struct.setInputNeuronCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // OUTPUT_NEURON_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.outputNeuronCount = iprot.readI32();
              struct.setOutputNeuronCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // TIMESTEPS_PER_ACTIVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timestepsPerActivation = iprot.readI32();
              struct.setTimestepsPerActivationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNeuronCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'neuronCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInputNeuronCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inputNeuronCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOutputNeuronCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'outputNeuronCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestepsPerActivation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestepsPerActivation' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CFastCyclicNetwork struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.connections != null) {
        oprot.writeFieldBegin(CONNECTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.connections.size()));
          for (CConnection _iter12 : struct.connections)
          {
            _iter12.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.activationFunctions != null) {
        oprot.writeFieldBegin(ACTIVATION_FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.activationFunctions.size()));
          for (String _iter13 : struct.activationFunctions)
          {
            oprot.writeString(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.neuronAuxArgs != null) {
        oprot.writeFieldBegin(NEURON_AUX_ARGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.neuronAuxArgs.size()));
          for (List<Double> _iter14 : struct.neuronAuxArgs)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter14.size()));
              for (double _iter15 : _iter14)
              {
                oprot.writeDouble(_iter15);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEURON_COUNT_FIELD_DESC);
      oprot.writeI32(struct.neuronCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INPUT_NEURON_COUNT_FIELD_DESC);
      oprot.writeI32(struct.inputNeuronCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_NEURON_COUNT_FIELD_DESC);
      oprot.writeI32(struct.outputNeuronCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTEPS_PER_ACTIVATION_FIELD_DESC);
      oprot.writeI32(struct.timestepsPerActivation);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CFastCyclicNetworkTupleSchemeFactory implements SchemeFactory {
    public CFastCyclicNetworkTupleScheme getScheme() {
      return new CFastCyclicNetworkTupleScheme();
    }
  }

  private static class CFastCyclicNetworkTupleScheme extends TupleScheme<CFastCyclicNetwork> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CFastCyclicNetwork struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.connections.size());
        for (CConnection _iter16 : struct.connections)
        {
          _iter16.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.activationFunctions.size());
        for (String _iter17 : struct.activationFunctions)
        {
          oprot.writeString(_iter17);
        }
      }
      {
        oprot.writeI32(struct.neuronAuxArgs.size());
        for (List<Double> _iter18 : struct.neuronAuxArgs)
        {
          {
            oprot.writeI32(_iter18.size());
            for (double _iter19 : _iter18)
            {
              oprot.writeDouble(_iter19);
            }
          }
        }
      }
      oprot.writeI32(struct.neuronCount);
      oprot.writeI32(struct.inputNeuronCount);
      oprot.writeI32(struct.outputNeuronCount);
      oprot.writeI32(struct.timestepsPerActivation);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CFastCyclicNetwork struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.connections = new ArrayList<CConnection>(_list20.size);
        for (int _i21 = 0; _i21 < _list20.size; ++_i21)
        {
          CConnection _elem22; // required
          _elem22 = new CConnection();
          _elem22.read(iprot);
          struct.connections.add(_elem22);
        }
      }
      struct.setConnectionsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.activationFunctions = new ArrayList<String>(_list23.size);
        for (int _i24 = 0; _i24 < _list23.size; ++_i24)
        {
          String _elem25; // required
          _elem25 = iprot.readString();
          struct.activationFunctions.add(_elem25);
        }
      }
      struct.setActivationFunctionsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.neuronAuxArgs = new ArrayList<List<Double>>(_list26.size);
        for (int _i27 = 0; _i27 < _list26.size; ++_i27)
        {
          List<Double> _elem28; // required
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            _elem28 = new ArrayList<Double>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              double _elem31; // required
              _elem31 = iprot.readDouble();
              _elem28.add(_elem31);
            }
          }
          struct.neuronAuxArgs.add(_elem28);
        }
      }
      struct.setNeuronAuxArgsIsSet(true);
      struct.neuronCount = iprot.readI32();
      struct.setNeuronCountIsSet(true);
      struct.inputNeuronCount = iprot.readI32();
      struct.setInputNeuronCountIsSet(true);
      struct.outputNeuronCount = iprot.readI32();
      struct.setOutputNeuronCountIsSet(true);
      struct.timestepsPerActivation = iprot.readI32();
      struct.setTimestepsPerActivationIsSet(true);
    }
  }

}

