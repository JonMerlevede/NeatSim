/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package neatsim.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CPopulationFitness implements org.apache.thrift.TBase<CPopulationFitness, CPopulationFitness._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CPopulationFitness");

  private static final org.apache.thrift.protocol.TField FITNESS_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("fitnessInfos", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField EVALUATION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluationCount", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CPopulationFitnessStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CPopulationFitnessTupleSchemeFactory());
  }

  public List<CFitnessInfo> fitnessInfos; // required
  public int evaluationCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FITNESS_INFOS((short)10, "fitnessInfos"),
    EVALUATION_COUNT((short)20, "evaluationCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // FITNESS_INFOS
          return FITNESS_INFOS;
        case 20: // EVALUATION_COUNT
          return EVALUATION_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVALUATIONCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FITNESS_INFOS, new org.apache.thrift.meta_data.FieldMetaData("fitnessInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CFitnessInfo.class))));
    tmpMap.put(_Fields.EVALUATION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("evaluationCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CPopulationFitness.class, metaDataMap);
  }

  public CPopulationFitness() {
  }

  public CPopulationFitness(
    List<CFitnessInfo> fitnessInfos,
    int evaluationCount)
  {
    this();
    this.fitnessInfos = fitnessInfos;
    this.evaluationCount = evaluationCount;
    setEvaluationCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CPopulationFitness(CPopulationFitness other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFitnessInfos()) {
      List<CFitnessInfo> __this__fitnessInfos = new ArrayList<CFitnessInfo>();
      for (CFitnessInfo other_element : other.fitnessInfos) {
        __this__fitnessInfos.add(new CFitnessInfo(other_element));
      }
      this.fitnessInfos = __this__fitnessInfos;
    }
    this.evaluationCount = other.evaluationCount;
  }

  public CPopulationFitness deepCopy() {
    return new CPopulationFitness(this);
  }

  @Override
  public void clear() {
    this.fitnessInfos = null;
    setEvaluationCountIsSet(false);
    this.evaluationCount = 0;
  }

  public int getFitnessInfosSize() {
    return (this.fitnessInfos == null) ? 0 : this.fitnessInfos.size();
  }

  public java.util.Iterator<CFitnessInfo> getFitnessInfosIterator() {
    return (this.fitnessInfos == null) ? null : this.fitnessInfos.iterator();
  }

  public void addToFitnessInfos(CFitnessInfo elem) {
    if (this.fitnessInfos == null) {
      this.fitnessInfos = new ArrayList<CFitnessInfo>();
    }
    this.fitnessInfos.add(elem);
  }

  public List<CFitnessInfo> getFitnessInfos() {
    return this.fitnessInfos;
  }

  public CPopulationFitness setFitnessInfos(List<CFitnessInfo> fitnessInfos) {
    this.fitnessInfos = fitnessInfos;
    return this;
  }

  public void unsetFitnessInfos() {
    this.fitnessInfos = null;
  }

  /** Returns true if field fitnessInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetFitnessInfos() {
    return this.fitnessInfos != null;
  }

  public void setFitnessInfosIsSet(boolean value) {
    if (!value) {
      this.fitnessInfos = null;
    }
  }

  public int getEvaluationCount() {
    return this.evaluationCount;
  }

  public CPopulationFitness setEvaluationCount(int evaluationCount) {
    this.evaluationCount = evaluationCount;
    setEvaluationCountIsSet(true);
    return this;
  }

  public void unsetEvaluationCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVALUATIONCOUNT_ISSET_ID);
  }

  /** Returns true if field evaluationCount is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluationCount() {
    return EncodingUtils.testBit(__isset_bitfield, __EVALUATIONCOUNT_ISSET_ID);
  }

  public void setEvaluationCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVALUATIONCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FITNESS_INFOS:
      if (value == null) {
        unsetFitnessInfos();
      } else {
        setFitnessInfos((List<CFitnessInfo>)value);
      }
      break;

    case EVALUATION_COUNT:
      if (value == null) {
        unsetEvaluationCount();
      } else {
        setEvaluationCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FITNESS_INFOS:
      return getFitnessInfos();

    case EVALUATION_COUNT:
      return Integer.valueOf(getEvaluationCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FITNESS_INFOS:
      return isSetFitnessInfos();
    case EVALUATION_COUNT:
      return isSetEvaluationCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CPopulationFitness)
      return this.equals((CPopulationFitness)that);
    return false;
  }

  public boolean equals(CPopulationFitness that) {
    if (that == null)
      return false;

    boolean this_present_fitnessInfos = true && this.isSetFitnessInfos();
    boolean that_present_fitnessInfos = true && that.isSetFitnessInfos();
    if (this_present_fitnessInfos || that_present_fitnessInfos) {
      if (!(this_present_fitnessInfos && that_present_fitnessInfos))
        return false;
      if (!this.fitnessInfos.equals(that.fitnessInfos))
        return false;
    }

    boolean this_present_evaluationCount = true;
    boolean that_present_evaluationCount = true;
    if (this_present_evaluationCount || that_present_evaluationCount) {
      if (!(this_present_evaluationCount && that_present_evaluationCount))
        return false;
      if (this.evaluationCount != that.evaluationCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CPopulationFitness other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CPopulationFitness typedOther = (CPopulationFitness)other;

    lastComparison = Boolean.valueOf(isSetFitnessInfos()).compareTo(typedOther.isSetFitnessInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFitnessInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fitnessInfos, typedOther.fitnessInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaluationCount()).compareTo(typedOther.isSetEvaluationCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluationCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluationCount, typedOther.evaluationCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CPopulationFitness(");
    boolean first = true;

    sb.append("fitnessInfos:");
    if (this.fitnessInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.fitnessInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluationCount:");
    sb.append(this.evaluationCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CPopulationFitnessStandardSchemeFactory implements SchemeFactory {
    public CPopulationFitnessStandardScheme getScheme() {
      return new CPopulationFitnessStandardScheme();
    }
  }

  private static class CPopulationFitnessStandardScheme extends StandardScheme<CPopulationFitness> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CPopulationFitness struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // FITNESS_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.fitnessInfos = new ArrayList<CFitnessInfo>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                {
                  CFitnessInfo _elem50; // required
                  _elem50 = new CFitnessInfo();
                  _elem50.read(iprot);
                  struct.fitnessInfos.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setFitnessInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EVALUATION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.evaluationCount = iprot.readI32();
              struct.setEvaluationCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CPopulationFitness struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fitnessInfos != null) {
        oprot.writeFieldBegin(FITNESS_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fitnessInfos.size()));
          for (CFitnessInfo _iter51 : struct.fitnessInfos)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EVALUATION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.evaluationCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CPopulationFitnessTupleSchemeFactory implements SchemeFactory {
    public CPopulationFitnessTupleScheme getScheme() {
      return new CPopulationFitnessTupleScheme();
    }
  }

  private static class CPopulationFitnessTupleScheme extends TupleScheme<CPopulationFitness> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CPopulationFitness struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFitnessInfos()) {
        optionals.set(0);
      }
      if (struct.isSetEvaluationCount()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFitnessInfos()) {
        {
          oprot.writeI32(struct.fitnessInfos.size());
          for (CFitnessInfo _iter52 : struct.fitnessInfos)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetEvaluationCount()) {
        oprot.writeI32(struct.evaluationCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CPopulationFitness struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fitnessInfos = new ArrayList<CFitnessInfo>(_list53.size);
          for (int _i54 = 0; _i54 < _list53.size; ++_i54)
          {
            CFitnessInfo _elem55; // required
            _elem55 = new CFitnessInfo();
            _elem55.read(iprot);
            struct.fitnessInfos.add(_elem55);
          }
        }
        struct.setFitnessInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.evaluationCount = iprot.readI32();
        struct.setEvaluationCountIsSet(true);
      }
    }
  }

}

