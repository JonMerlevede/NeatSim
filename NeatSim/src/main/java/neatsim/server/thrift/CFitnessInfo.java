/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package neatsim.server.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CFitnessInfo implements org.apache.thrift.TBase<CFitnessInfo, CFitnessInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CFitnessInfo");

  private static final org.apache.thrift.protocol.TField AUX_FITNESS_FIELD_DESC = new org.apache.thrift.protocol.TField("auxFitness", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField FITNESS_FIELD_DESC = new org.apache.thrift.protocol.TField("fitness", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField STOP_CONDITION_SATISFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("stopConditionSatisfied", org.apache.thrift.protocol.TType.BOOL, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CFitnessInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CFitnessInfoTupleSchemeFactory());
  }

  public List<CAuxFitnessInfo> auxFitness; // required
  public double fitness; // required
  public boolean stopConditionSatisfied; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUX_FITNESS((short)10, "auxFitness"),
    FITNESS((short)20, "fitness"),
    STOP_CONDITION_SATISFIED((short)30, "stopConditionSatisfied");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // AUX_FITNESS
          return AUX_FITNESS;
        case 20: // FITNESS
          return FITNESS;
        case 30: // STOP_CONDITION_SATISFIED
          return STOP_CONDITION_SATISFIED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FITNESS_ISSET_ID = 0;
  private static final int __STOPCONDITIONSATISFIED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUX_FITNESS, new org.apache.thrift.meta_data.FieldMetaData("auxFitness", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CAuxFitnessInfo.class))));
    tmpMap.put(_Fields.FITNESS, new org.apache.thrift.meta_data.FieldMetaData("fitness", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOP_CONDITION_SATISFIED, new org.apache.thrift.meta_data.FieldMetaData("stopConditionSatisfied", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CFitnessInfo.class, metaDataMap);
  }

  public CFitnessInfo() {
    this.stopConditionSatisfied = false;

  }

  public CFitnessInfo(
    List<CAuxFitnessInfo> auxFitness,
    double fitness,
    boolean stopConditionSatisfied)
  {
    this();
    this.auxFitness = auxFitness;
    this.fitness = fitness;
    setFitnessIsSet(true);
    this.stopConditionSatisfied = stopConditionSatisfied;
    setStopConditionSatisfiedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CFitnessInfo(CFitnessInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAuxFitness()) {
      List<CAuxFitnessInfo> __this__auxFitness = new ArrayList<CAuxFitnessInfo>();
      for (CAuxFitnessInfo other_element : other.auxFitness) {
        __this__auxFitness.add(new CAuxFitnessInfo(other_element));
      }
      this.auxFitness = __this__auxFitness;
    }
    this.fitness = other.fitness;
    this.stopConditionSatisfied = other.stopConditionSatisfied;
  }

  public CFitnessInfo deepCopy() {
    return new CFitnessInfo(this);
  }

  @Override
  public void clear() {
    this.auxFitness = null;
    setFitnessIsSet(false);
    this.fitness = 0.0;
    this.stopConditionSatisfied = false;

  }

  public int getAuxFitnessSize() {
    return (this.auxFitness == null) ? 0 : this.auxFitness.size();
  }

  public java.util.Iterator<CAuxFitnessInfo> getAuxFitnessIterator() {
    return (this.auxFitness == null) ? null : this.auxFitness.iterator();
  }

  public void addToAuxFitness(CAuxFitnessInfo elem) {
    if (this.auxFitness == null) {
      this.auxFitness = new ArrayList<CAuxFitnessInfo>();
    }
    this.auxFitness.add(elem);
  }

  public List<CAuxFitnessInfo> getAuxFitness() {
    return this.auxFitness;
  }

  public CFitnessInfo setAuxFitness(List<CAuxFitnessInfo> auxFitness) {
    this.auxFitness = auxFitness;
    return this;
  }

  public void unsetAuxFitness() {
    this.auxFitness = null;
  }

  /** Returns true if field auxFitness is set (has been assigned a value) and false otherwise */
  public boolean isSetAuxFitness() {
    return this.auxFitness != null;
  }

  public void setAuxFitnessIsSet(boolean value) {
    if (!value) {
      this.auxFitness = null;
    }
  }

  public double getFitness() {
    return this.fitness;
  }

  public CFitnessInfo setFitness(double fitness) {
    this.fitness = fitness;
    setFitnessIsSet(true);
    return this;
  }

  public void unsetFitness() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FITNESS_ISSET_ID);
  }

  /** Returns true if field fitness is set (has been assigned a value) and false otherwise */
  public boolean isSetFitness() {
    return EncodingUtils.testBit(__isset_bitfield, __FITNESS_ISSET_ID);
  }

  public void setFitnessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FITNESS_ISSET_ID, value);
  }

  public boolean isStopConditionSatisfied() {
    return this.stopConditionSatisfied;
  }

  public CFitnessInfo setStopConditionSatisfied(boolean stopConditionSatisfied) {
    this.stopConditionSatisfied = stopConditionSatisfied;
    setStopConditionSatisfiedIsSet(true);
    return this;
  }

  public void unsetStopConditionSatisfied() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPCONDITIONSATISFIED_ISSET_ID);
  }

  /** Returns true if field stopConditionSatisfied is set (has been assigned a value) and false otherwise */
  public boolean isSetStopConditionSatisfied() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPCONDITIONSATISFIED_ISSET_ID);
  }

  public void setStopConditionSatisfiedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPCONDITIONSATISFIED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUX_FITNESS:
      if (value == null) {
        unsetAuxFitness();
      } else {
        setAuxFitness((List<CAuxFitnessInfo>)value);
      }
      break;

    case FITNESS:
      if (value == null) {
        unsetFitness();
      } else {
        setFitness((Double)value);
      }
      break;

    case STOP_CONDITION_SATISFIED:
      if (value == null) {
        unsetStopConditionSatisfied();
      } else {
        setStopConditionSatisfied((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUX_FITNESS:
      return getAuxFitness();

    case FITNESS:
      return Double.valueOf(getFitness());

    case STOP_CONDITION_SATISFIED:
      return Boolean.valueOf(isStopConditionSatisfied());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUX_FITNESS:
      return isSetAuxFitness();
    case FITNESS:
      return isSetFitness();
    case STOP_CONDITION_SATISFIED:
      return isSetStopConditionSatisfied();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CFitnessInfo)
      return this.equals((CFitnessInfo)that);
    return false;
  }

  public boolean equals(CFitnessInfo that) {
    if (that == null)
      return false;

    boolean this_present_auxFitness = true && this.isSetAuxFitness();
    boolean that_present_auxFitness = true && that.isSetAuxFitness();
    if (this_present_auxFitness || that_present_auxFitness) {
      if (!(this_present_auxFitness && that_present_auxFitness))
        return false;
      if (!this.auxFitness.equals(that.auxFitness))
        return false;
    }

    boolean this_present_fitness = true;
    boolean that_present_fitness = true;
    if (this_present_fitness || that_present_fitness) {
      if (!(this_present_fitness && that_present_fitness))
        return false;
      if (this.fitness != that.fitness)
        return false;
    }

    boolean this_present_stopConditionSatisfied = true;
    boolean that_present_stopConditionSatisfied = true;
    if (this_present_stopConditionSatisfied || that_present_stopConditionSatisfied) {
      if (!(this_present_stopConditionSatisfied && that_present_stopConditionSatisfied))
        return false;
      if (this.stopConditionSatisfied != that.stopConditionSatisfied)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CFitnessInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CFitnessInfo typedOther = (CFitnessInfo)other;

    lastComparison = Boolean.valueOf(isSetAuxFitness()).compareTo(typedOther.isSetAuxFitness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuxFitness()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auxFitness, typedOther.auxFitness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFitness()).compareTo(typedOther.isSetFitness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFitness()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fitness, typedOther.fitness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopConditionSatisfied()).compareTo(typedOther.isSetStopConditionSatisfied());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopConditionSatisfied()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopConditionSatisfied, typedOther.stopConditionSatisfied);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CFitnessInfo(");
    boolean first = true;

    sb.append("auxFitness:");
    if (this.auxFitness == null) {
      sb.append("null");
    } else {
      sb.append(this.auxFitness);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fitness:");
    sb.append(this.fitness);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopConditionSatisfied:");
    sb.append(this.stopConditionSatisfied);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (auxFitness == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'auxFitness' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fitness' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'stopConditionSatisfied' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CFitnessInfoStandardSchemeFactory implements SchemeFactory {
    public CFitnessInfoStandardScheme getScheme() {
      return new CFitnessInfoStandardScheme();
    }
  }

  private static class CFitnessInfoStandardScheme extends StandardScheme<CFitnessInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CFitnessInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // AUX_FITNESS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.auxFitness = new ArrayList<CAuxFitnessInfo>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  CAuxFitnessInfo _elem34; // required
                  _elem34 = new CAuxFitnessInfo();
                  _elem34.read(iprot);
                  struct.auxFitness.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setAuxFitnessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FITNESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fitness = iprot.readDouble();
              struct.setFitnessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // STOP_CONDITION_SATISFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stopConditionSatisfied = iprot.readBool();
              struct.setStopConditionSatisfiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFitness()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fitness' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStopConditionSatisfied()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stopConditionSatisfied' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CFitnessInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.auxFitness != null) {
        oprot.writeFieldBegin(AUX_FITNESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.auxFitness.size()));
          for (CAuxFitnessInfo _iter35 : struct.auxFitness)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FITNESS_FIELD_DESC);
      oprot.writeDouble(struct.fitness);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_CONDITION_SATISFIED_FIELD_DESC);
      oprot.writeBool(struct.stopConditionSatisfied);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CFitnessInfoTupleSchemeFactory implements SchemeFactory {
    public CFitnessInfoTupleScheme getScheme() {
      return new CFitnessInfoTupleScheme();
    }
  }

  private static class CFitnessInfoTupleScheme extends TupleScheme<CFitnessInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CFitnessInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.auxFitness.size());
        for (CAuxFitnessInfo _iter36 : struct.auxFitness)
        {
          _iter36.write(oprot);
        }
      }
      oprot.writeDouble(struct.fitness);
      oprot.writeBool(struct.stopConditionSatisfied);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CFitnessInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.auxFitness = new ArrayList<CAuxFitnessInfo>(_list37.size);
        for (int _i38 = 0; _i38 < _list37.size; ++_i38)
        {
          CAuxFitnessInfo _elem39; // required
          _elem39 = new CAuxFitnessInfo();
          _elem39.read(iprot);
          struct.auxFitness.add(_elem39);
        }
      }
      struct.setAuxFitnessIsSet(true);
      struct.fitness = iprot.readDouble();
      struct.setFitnessIsSet(true);
      struct.stopConditionSatisfied = iprot.readBool();
      struct.setStopConditionSatisfiedIsSet(true);
    }
  }

}

